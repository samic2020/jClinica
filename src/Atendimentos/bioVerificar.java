/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Atendimentos;

import static Db.DbMain.findIDTemplate;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.UUID;
import veridis.biometric.BiometricException;
import veridis.biometric.BiometricImage;
import veridis.biometric.BiometricSDK;
import veridis.biometric.BiometricScanner;
import veridis.biometric.BiometricTemplate;
import veridis.biometric.CaptureEventListener;
import veridis.biometric.samples.util.LicenseHelper;
import veridis.sample.util.Logger;
import veridis.sample.util.TextComponentLogger;

/**
 *
 * @author Pc
 */
public class bioVerificar extends javax.swing.JDialog  implements CaptureEventListener {
    private CaptureEventListener listener = this;
    private boolean isCaptureOn = false;
    private static BiometricImage image = null;

    Logger logPanel;
    String arch;

    String nID = "";
    
    public String get() { return nID; }
    
    /**
     * Creates new form bioVerificar
     */
    public bioVerificar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        UUID id = UUID.randomUUID();
        String tempFolderName = System.getProperty("java.io.tmpdir")+"/"+id;
        copyToTempFolder(tempFolderName);

        /*
         * You have to set the directory where the .dll (windows) or .so (linux)
         * are found 
         * Don't forget that they must be on the system_path, or on
         * the java library path or in temporary path
         */
        LicenseHelper.setLibrariesDirectory(tempFolderName);

        String key = "0000-0054-7B2B-7A2E-C618"; 
        BiometricSDK.InstallLicense(key);
        
        this.setSize(180, 210);
        setLocationRelativeTo(null);

        TextComponentLogger logger = new TextComponentLogger(logView);
        logView.setPreferredSize(new Dimension(100, 150));
        logPanel = new Logger(logger);
        logView.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new veridis.biometric.JBiometricPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logView = new javax.swing.JTextArea();
        jbtbuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(".:: Identificação Biométrica");
        setAlwaysOnTop(true);
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        imagePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        logView.setColumns(20);
        logView.setRows(5);
        jScrollPane1.setViewportView(logView);

        jbtbuscar.setText("Buscar");
        jbtbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtbuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jbtbuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isCaptureOn) BiometricSDK.StopSDK(listener);
    }//GEN-LAST:event_formWindowClosing

    private void jbtbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtbuscarActionPerformed
        if (image != null)
            try {

                String ret = findIDTemplate(new BiometricTemplate(image));
                if (ret != null) {
                        logPanel.log("Usuário " + ret);
                        nID = ret;
                        this.dispose();
                } else 
                        logPanel.log("Usuário não encontrado.");

            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        else
                logPanel.log("Primeiro entre com uma digital.");
    }//GEN-LAST:event_jbtbuscarActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        startCapture();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bioVerificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bioVerificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bioVerificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bioVerificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                bioVerificar dialog = new bioVerificar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private veridis.biometric.JBiometricPanel imagePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtbuscar;
    private javax.swing.JTextArea logView;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onCaptureEvent(CaptureEventType eventType, BiometricScanner reader, BiometricImage image) {
        if (image != null)
                logPanel.log(reader + ": " + eventType + "  => " + image);
        else
                logPanel.log(reader + ": " + eventType);

        switch (eventType) {
        // Device plugged. I want to receive images from it.
        case PLUG: {
                try {
                        reader.addCaptureEventListener(this);

                } catch (BiometricException e) {
                        logPanel.log("Cannot start device " + reader + ": " + e);
                }
                break;
        }
        // Device unplugged.
        // It might be nice to display it on your UI, but no action is required.
        case UNPLUG:
                break;

        // The biometric feature has been placed on the scanner.
        // It might be nice to display it on your UI, but no action is required.
        case PLACED:
                break;
        // The biometric feature has been removed from the scanner.
        // It might be nice to display it on your UI, but no action is required.
        case REMOVED:
                break;

        // A image frame has been received.
        // It might be nice to display it on your UI, but no action is required.
        case IMAGE_FRAME:
                imagePanel.setImage(image);
                // pack(); //Refresh layout
                break;
        // A 'final' image has been captured. THIS is the image that we must
        // handle!
        case IMAGE_CAPTURED: {

                imagePanel.setImage(image);

                this.image = image;

                if (image != null)
                    try {

                        String ret = findIDTemplate(new BiometricTemplate(image));
                        if (ret != null) {
                                imagePanel.setBackground(new Color(240, 240, 240));
                                logPanel.log("Usuário " + ret);
                                nID = ret;
                                this.dispose();
                        } else 
                                imagePanel.setBackground(Color.red);
                                logPanel.log("Usuário não encontrado.");

                    } catch (SQLException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                else
                        logPanel.log("Primeiro entre com uma digital.");

                break;
        }

        }        
    }

    public void copyToTempFolder(String tempFolderName){
        /*finds out if you are running on 32 or 64bits*/
        if( System.getProperty("sun.arch.data.model").equals("64")){
                arch = "x64";
        }
        else arch = "x86";

        ArrayList <String> dllNames = new ArrayList<String> ();

        /*dlls to be loaded*/
        dllNames.add("pthreadVC2.dll");
        dllNames.add("VrBio.dll");
        dllNames.add("VrModuleFutronic.dll");
        dllNames.add("VrModuleDigitalPersona.dll");
        dllNames.add("VrModuleNitgen.dll");
        dllNames.add("VrModuleSuprema.dll");

        dllNames.add("libusb0.dll");
        dllNames.add("ftrScanAPI.dll");
        dllNames.add("NBioBSP.dll");
        dllNames.add("UFScanner.dll");
        dllNames.add("UFLicense.dat");

        String dllName;

        for(int i = 0; i < dllNames.size(); i++){
            dllName = dllNames.get(i);
            /*makes new folder*/
            new File(tempFolderName).mkdirs();
            File tmpDir = new File(tempFolderName);
            File tmpFile = new File(tmpDir, dllName);

            if(!new File(tmpDir+"/"+dllName).isFile()){
                try {
                    InputStream in = getClass().getResourceAsStream("/dlls/"+arch+"/"+dllName);
                    OutputStream out = new FileOutputStream(tmpFile);

                    byte[] buf = new byte[8192];
                    int len;
                    while ((len = in.read(buf)) != -1) {
                        out.write(buf, 0, len);
                    }

                    in.close();
                    out.close();

                } catch (UnsatisfiedLinkError e) {
                    e.printStackTrace();
                    // deal with exception
                } catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
    }    
    
    public void startCapture() {
            if (!isCaptureOn) BiometricSDK.StartSDK(this);
            isCaptureOn = true;
    }

    public void stopCapture() {

            if (isCaptureOn) {
                    BiometricSDK.StopSDK(this);
                    System.out.println("parou captura");
            }
            isCaptureOn = false;
    }

    public static BiometricImage getImage() {
            return image;
    }
}
