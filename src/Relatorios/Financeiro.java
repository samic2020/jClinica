/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Relatorios;

import Db.DbMain;
import Funcoes.Dates;
import Funcoes.FuncoesGlobais;
import Funcoes.TableControl;
import Funcoes.VariaveisGlobais;
import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JRViewer;

/**
 *
 * @author Samic
 */
public class Financeiro extends javax.swing.JInternalFrame {
    DbMain conn = VariaveisGlobais.con;
    TableRowSorter<TableModel> sorter;
    int cdmed = -1;
    boolean bExecNome = false, bExecCodigo = false;
    String[] meses = {"","Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"};

    /**
     * Creates new form Financeiro_comissao
     */
    public Financeiro() {
        initComponents();
        
        {
            jMedicos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            String[][] aheader = { { "codigo", "Medico", "Especialidade" }, { "0", "380", "150" } };
            TableControl.header(jMedicos, aheader);
        
            GridComissoes();
        }
        
        jBuscar.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                if ("".equals(jBuscar.getText().trim())) {
                    sorter.setRowFilter(null);
                } else {
                    try {
                        sorter.setRowFilter(
                           RowFilter.regexFilter(jBuscar.getText().trim()));
                    } catch (PatternSyntaxException pse) {
                       System.err.println("Bad regex pattern");
                    }
                }
            }

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }
        });

        jBuscar.requestFocus();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMedicos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jBuscar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jdtinic = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jdtfim = new javax.swing.JFormattedTextField();
        jbtPrint = new javax.swing.JButton();
        jrbtComissoes = new javax.swing.JRadioButton();
        jrbtPlantoes = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(101, 227, 255));
        setClosable(true);
        setTitle(".:: Relatorio Financeiro");
        setOpaque(true);
        setVisible(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(0, 102, 255));
        jLabel3.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(253, 251, 251));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Selecione o Médico");
        jLabel3.setOpaque(true);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 629, -1));

        jMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cdMed", "Médico", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jMedicos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jMedicos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jMedicos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 623, 281));

        jLabel4.setText("Buscar:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));
        getContentPane().add(jBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 583, -1));

        jLabel1.setText("Período:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        jdtinic.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        jdtinic.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(jdtinic, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 88, -1));

        jLabel2.setText("até");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, -1, -1));

        jdtfim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        jdtfim.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(jdtfim, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 89, -1));

        jbtPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/nPrint.png"))); // NOI18N
        jbtPrint.setText("Print");
        jbtPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPrintActionPerformed(evt);
            }
        });
        getContentPane().add(jbtPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 360, -1, 23));

        jrbtComissoes.setBackground(new java.awt.Color(101, 227, 255));
        buttonGroup1.add(jrbtComissoes);
        jrbtComissoes.setSelected(true);
        jrbtComissoes.setText("Comissões");
        jrbtComissoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbtComissoesActionPerformed(evt);
            }
        });
        getContentPane().add(jrbtComissoes, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, -1, -1));

        jrbtPlantoes.setBackground(new java.awt.Color(101, 227, 255));
        buttonGroup1.add(jrbtPlantoes);
        jrbtPlantoes.setText("Plantões");
        jrbtPlantoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbtPlantoesActionPerformed(evt);
            }
        });
        getContentPane().add(jrbtPlantoes, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPrintActionPerformed
        if (cdmed <= -1) return;
        
        if (!Dates.isDateValid(jdtinic.getText(), "dd/MM/yyyy")) {
            JOptionPane.showMessageDialog(this, "Você de lançar uma data válida!");
            jdtinic.requestFocus();
            return;
        }
        
        if (!Dates.isDateValid(jdtfim.getText(), "dd/MM/yyyy")) {
            JOptionPane.showMessageDialog(this, "Você de lançar uma data válida!");
            jdtfim.requestFocus();
            return;
        }
        
        Map parametros = new HashMap();
        parametros.put("datainic", (Date)jdtinic.getValue());
        parametros.put("datafim", (Date)jdtfim.getValue());
        parametros.put("logado", VariaveisGlobais.logado);

        String repoName = null; List<FinanceiroClass> lista = null;
        Date dtIni = Dates.StringtoDate(jdtinic.getText(), "dd-MM-yyyy");
        Date dtFin = Dates.StringtoDate(jdtfim.getText(), "dd-MM-yyyy");
        
        if (Dates.iYear(dtIni) != Dates.iYear(dtFin)) {
            JOptionPane.showInternalMessageDialog(this, "Você só pode imprimir no mesmo ano.");
            jdtinic.requestFocus();
            return;
        }
        
        if (jrbtComissoes.isSelected()) {
            // Comissões
            repoName = "Financeiro1";
            lista = ReportComissões(dtIni, dtFin);
        } else {
            // Plnatões
            repoName = "Financeiro2";
            lista = ReportPlantoes(dtIni, dtFin);
        }
        
        String fileName = "reports/" + repoName + ".jasper";
            
        PrintReport(fileName, parametros, lista);
    }//GEN-LAST:event_jbtPrintActionPerformed

    private Object[][] ListaMedConv(Date dtInicio, Date dtFinal, boolean isplantao) {
        Object[][] retorno = {};
        String selectSQL = "SELECT DISTINCT fat.ma_codmedico, fat.ma_convnumero " +
                           "FROM faturar fat WHERE " +
                           (cdmed == 0 ? "" : "fat.ma_codmedico = ? AND ") +
                           "(fat.ma_data BETWEEN ? AND ?) AND " +
                           "fat.ma_status = 4 AND fat.ma_consulta = 1 AND " +
                           "(SELECT med.md_plantao FROM medicos med WHERE med.md_codigo = fat.ma_codmedico LIMIT 1) = ? " +
                           "ORDER BY fat.ma_codmedico, fat.ma_convnumero;";
        Object[][] param = null;
        if (cdmed != 0) {
            param = new Object[][] {
                {"int", cdmed},
                {"date",  Dates.DateFormat("yyyy-MM-dd", dtInicio)}, 
                {"date", Dates.DateFormat("yyyy-MM-dd", dtFinal)},
                {"boolean", isplantao}
            };
        } else {
            param = new Object[][] {
                {"date",  Dates.DateFormat("yyyy-MM-dd", dtInicio)}, 
                {"date", Dates.DateFormat("yyyy-MM-dd", dtFinal)},
                {"boolean", isplantao}
            };            
        }
        
        ResultSet rs = conn.AbrirTabela(selectSQL, ResultSet.CONCUR_READ_ONLY, param);
        try {
            while (rs.next()) {
                retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {rs.getInt("ma_codmedico"), rs.getInt("ma_convnumero")});
            }
        } catch (SQLException e) { e.printStackTrace(); }
        DbMain.FecharTabela(rs);
        return retorno;
    }
    
    private List<FinanceiroClass> ReportComissões(Date dtInicio, Date dtFinal) {
        List<FinanceiroClass> lista = new ArrayList<>();
        
        Object[][] medconv = ListaMedConv(dtInicio, dtFinal, false);
        if (medconv.length <= 0) return null;
        
        int nid = 0;
        
        String tmpMesAno = "";            
          
        int oldtdias = 0; 
        String oldtmesano = ""; Integer oldtcdmedico = -1; String oldtnmmedico = "";
        double oldtconvnumero = -1; String oldtconvnome = ""; int oldtatd = 0;
        double oldtvrconsulta = 0;
        double oldtvrmedico = 0;
        double oldtmedicoplantaovr =  0;
        
        int newmed = -1; int newconv = -1;
        for (Object[] item : medconv) {
            
            newmed = (int)item[0];
            newconv = (int)item[1];
            
            if (oldtcdmedico != -1 && oldtconvnumero != -1) {
                if (oldtcdmedico != newmed || (int)oldtconvnumero != newconv) {
                    if (oldtatd != 0) lista.add(new FinanceiroClass(nid++, oldtmesano.substring(5,7) + meses[Integer.valueOf(oldtmesano.substring(5,7))], oldtcdmedico, oldtnmmedico, (int)oldtconvnumero, oldtconvnome, oldtatd, oldtvrconsulta, oldtvrmedico, oldtdias, oldtmedicoplantaovr));
                    
                    oldtatd = 0;                    
                }
            }
            
            String selectSQL = "SELECT fat.ma_data, to_char(fat.ma_data, 'YYYY-MM') ma_mesano, " + 
            "fat.ma_codmedico, fat.ma_convnumero, count(fat.ma_data)::int ma_atd FROM faturar fat " +
            "WHERE (fat.ma_data BETWEEN ? AND ?) AND (fat.ma_status = 4 AND fat.ma_consulta = 1) AND " + 
            "(fat.ma_codmedico = ? AND fat.ma_convnumero = ?) " +
            "GROUP BY fat.ma_data, fat.ma_codmedico, fat.ma_convnumero " +
            "ORDER BY fat.ma_codmedico, fat.ma_convnumero;";
            Object[][] param = {
                {"date", Dates.DateFormat("yyyy-MM-dd", dtInicio)}, 
                {"date", Dates.DateFormat("yyyy-MM-dd", dtFinal)},
                {"int", (int)item[0]},
                {"int", (int)item[1]}
            };

            ResultSet fatRs = conn.AbrirTabela(selectSQL, ResultSet.CONCUR_READ_ONLY, param);
            try {
                int tdias = 0; int tatd = 0;
                while (fatRs.next()) {
                    String tmesano = fatRs.getString("ma_mesano");
                    
                    tatd = fatRs.getInt("ma_atd");
                    
                    int tcdmedico = fatRs.getInt("ma_codmedico");
                    
                    String tnmmedico = null;
                    int tmedicopecr = 0;
                    double tvrconsulta = 0;
                    double tvrmedico = 0;
                    boolean tmedicoplantao = false;
                    double tmedicoplantaovr = 0;

                    // Pega dados do médico
                    String medSQL = "SELECT med.md_nome, med.md_perc, md_vrconsulta, " + 
                            "md_vrmedico, md_plantao, md_plantaovr " +
                            "FROM medicos med WHERE med.md_codigo = ? LIMIT 1;";
                    Object[][] medParam = {{"int", (int)item[0]}};
                    ResultSet medRs = conn.AbrirTabela(medSQL, ResultSet.CONCUR_READ_ONLY, medParam);
                    try {
                        while (medRs.next()) {
                            tnmmedico = medRs.getString("md_nome");
                            tmedicopecr = medRs.getInt("md_perc");
                            tvrconsulta = medRs.getBigDecimal("md_vrconsulta").doubleValue();
                            tvrmedico = medRs.getBigDecimal("md_vrmedico").doubleValue();
                            tmedicoplantao = medRs.getBoolean("md_plantao");
                            tmedicoplantaovr = medRs.getBigDecimal("md_plantaovr").doubleValue();
                        }
                    } catch (SQLException medEx) { medEx.printStackTrace(); }
                    DbMain.FecharTabela(medRs);

                    double tconvnumero = fatRs.getDouble("ma_convnumero");
                    
                    // Pega dados do medtaxas
                    double tvrclinica = 0;
                    double tvrmedicotx = 0;
                    String mtxSQL = "SELECT  mtx.mt_valor, mtx.mt_valormed " +
                    "FROM medtaxas mtx WHERE mtx.mt_cdmedico = ? AND mtx.mt_cdconvenio = ? LIMIT 1;";
                    Object[][] mtxParam = {{"int", (int)item[0]}, {"int", (int)item[1]}};
                    ResultSet mtxRs = conn.AbrirTabela(mtxSQL, ResultSet.CONCUR_READ_ONLY, mtxParam);
                    try {
                        while (mtxRs.next()) {
                            tvrclinica = mtxRs.getBigDecimal("mt_valor").doubleValue();
                            tvrmedicotx = mtxRs.getBigDecimal("mt_valormed").doubleValue();
                        }
                    } catch (SQLException mtxEx) { mtxEx.printStackTrace(); }
                    DbMain.FecharTabela(mtxRs);
                    
                    String tconvnome = null;
                    BigDecimal consultavr = new BigDecimal("0");
                    BigDecimal medicovr = new BigDecimal("0");
                    
                    // Pega dados do convenio
                    String convSQL = "SELECT con.cv_apelido, cv_consultavr, cv_medicovr FROM convenios con WHERE con.cv_numero = ? LIMIT 1;";
                    Object[][] conParam = {{"int", (int)item[1]}};
                    ResultSet conRs = conn.AbrirTabela(convSQL, ResultSet.CONCUR_READ_ONLY, conParam);
                    try {
                        while (conRs.next()) {
                            tconvnome = conRs.getString("cv_apelido");
                            consultavr = conRs.getBigDecimal("cv_consultavr");
                            medicovr = conRs.getBigDecimal("cv_medicovr");
                        }
                    } catch (SQLException conEx) { conEx.printStackTrace(); }
                    DbMain.FecharTabela(conRs);

                    if (tvrclinica != 0 || tvrmedicotx != 0) {
                        tvrconsulta = tvrclinica;
                        tvrmedico = tvrmedicotx;
                    } else {
                        if (!tconvnome.equalsIgnoreCase("PARTICULAR")) {                         
                            tvrconsulta = consultavr.doubleValue();
                            tvrmedico = medicovr.doubleValue();
                        }
                    }

                    // ]-----------------------------------------------------------------------------------[
                    // Pula tudo e pega do faturar
                    String gerSelect = "SELECT cv_consultavr, cv_medicovr FROM faturar fat WHERE " +
                        "(EXTRACT(MONTH FROM fat.ma_data::date)::int = ? AND EXTRACT(YEAR FROM fat.ma_data::date)::int = ?) AND " +
                        "(fat.ma_status = 4 AND fat.ma_consulta = 1) AND " +
                        "(fat.ma_codmedico = ? AND fat.ma_convnumero = ?) " +
                        "ORDER BY fat.ma_codmedico, fat.ma_convnumero LIMIT 1;";

                    String mes = "", ano = "";
                    if (oldtmesano.isEmpty()) {
                        mes = tmesano.substring(5,7);
                        ano = tmesano.substring(0,4);
                    } else {
                        mes = oldtmesano.substring(5,7);
                        ano = oldtmesano.substring(0,4);
                    }
                    Object[][] gerParam = {
                        {"int", Integer.valueOf(mes)},
                        {"int", Integer.valueOf(ano)},
                        {"int", (int)item[0]}, 
                        {"int", (int)item[1]}
                    };

                    ResultSet gerRs = conn.AbrirTabela(gerSelect, ResultSet.CONCUR_READ_ONLY, gerParam);
                    double fatconsultavr = 0;
                    double fatmedicovr = 0;
                    try {
                        while (gerRs.next()) {
                            fatconsultavr = gerRs.getBigDecimal("cv_consultavr").doubleValue();
                            fatmedicovr = gerRs.getBigDecimal("cv_medicovr").doubleValue();
                        }
                    } catch (SQLException conEx) { conEx.printStackTrace(); }
                    DbMain.FecharTabela(gerRs);
                    
                    tvrconsulta = fatconsultavr;
                    tvrmedico = fatmedicovr;
                    // ]-----------------------------------------------------------------------------------[                    
                    
                    // Separa só os comissionados
                    if (tmedicoplantao) continue;
                    
                    if (tmpMesAno.isEmpty()) {
                        oldtdias = 1;
                        tdias = 1;
                        
                        tmpMesAno = tmesano;
                    }

                    if (!tmpMesAno.equalsIgnoreCase(tmesano)) {
                        if (oldtatd != 0) lista.add(new FinanceiroClass(nid++, oldtmesano.substring(5,7) + meses[Integer.valueOf(oldtmesano.substring(5,7))], oldtcdmedico, oldtnmmedico, (int)oldtconvnumero, oldtconvnome, oldtatd, oldtvrconsulta, oldtvrmedico, oldtdias, oldtmedicoplantaovr));

                        tdias = 1; 
                        oldtatd = 0;
                    }

                    oldtmesano = tmesano;
                    oldtcdmedico = tcdmedico;
                    oldtnmmedico = tnmmedico;
                    oldtconvnumero = tconvnumero;
                    oldtconvnome = tconvnome;
                    oldtatd += tatd;
                    oldtvrconsulta = tvrconsulta;
                    oldtvrmedico = tvrmedico;
                    oldtmedicoplantaovr =  tmedicoplantaovr;                    
                    oldtdias = tdias;

                    tdias += 1;
                    tmpMesAno = tmesano;
                    
                }
            } catch (SQLException ex) { ex.printStackTrace(); }
            DbMain.FecharTabela(fatRs);            
        }        
        
        Collections.sort(lista, new Comparator<FinanceiroClass>() {
            @Override
            public int compare(FinanceiroClass fruit2, FinanceiroClass fruit1) {
                return  fruit1.getData().compareTo(fruit2.getData());
            }
        });  
        
        return lista;        
    }
    
    private List<FinanceiroClass> ReportPlantoes(Date dtInicio, Date dtFinal) {
        List<FinanceiroClass> lista = new ArrayList<>();
        
        Object[][] medconv = ListaMedConv(dtInicio, dtFinal, true);
        if (medconv.length <= 0) return null;
        
        int nid = 0;
        
        String tmpMesAno = "";            
          
        int oldtdias = 0; 
        String oldtmesano = ""; Integer oldtcdmedico = -1; String oldtnmmedico = "";
        double oldtconvnumero = -1; String oldtconvnome = ""; int oldtatd = 0;
        double oldtvrconsulta = 0;
        double oldtvrmedico = 0;
        double oldtmedicoplantaovr =  0;
        
        int newmed = -1; int newconv = -1;
        for (Object[] item : medconv) {
            
            newmed = (int)item[0];
            newconv = (int)item[1];
            
            if (oldtcdmedico != -1 && oldtconvnumero != -1) {
                if (oldtcdmedico != newmed || (int)oldtconvnumero != newconv) {
                    if (oldtatd != 0) lista.add(new FinanceiroClass(nid++, oldtmesano.substring(5,7) + meses[Integer.valueOf(oldtmesano.substring(5,7))], oldtcdmedico, oldtnmmedico, (int)oldtconvnumero, oldtconvnome, oldtatd, oldtvrconsulta, oldtvrmedico, oldtdias, oldtmedicoplantaovr));
                    
                    oldtatd = 0;  
                    //oldtdias = 0;   
                    tmpMesAno = "";               
                }
            }
            
            String selectSQL = "SELECT fat.ma_data, to_char(fat.ma_data, 'YYYY-MM') ma_mesano, " + 
            "fat.ma_codmedico, fat.ma_convnumero, count(fat.ma_data)::int ma_atd FROM faturar fat " +
            "WHERE (fat.ma_data BETWEEN ? AND ?) AND (fat.ma_status = 4 AND fat.ma_consulta = 1) AND " + 
            "(fat.ma_codmedico = ? AND fat.ma_convnumero = ?) " +
            "GROUP BY fat.ma_data, fat.ma_codmedico, fat.ma_convnumero " +
            "ORDER BY fat.ma_codmedico, fat.ma_convnumero;";
            Object[][] param = {
                {"date", Dates.DateFormat("yyyy-MM-dd", dtInicio)}, 
                {"date", Dates.DateFormat("yyyy-MM-dd", dtFinal)},
                {"int", (int)item[0]},
                {"int", (int)item[1]}
            };

            ResultSet fatRs = conn.AbrirTabela(selectSQL, ResultSet.CONCUR_READ_ONLY, param);
            try {
                //int tdias = 0; 
                int tatd = 0;
                while (fatRs.next()) {
                    String tmesano = fatRs.getString("ma_mesano");
                    
                    tatd = fatRs.getInt("ma_atd");
                    
                    int tcdmedico = fatRs.getInt("ma_codmedico");
                    String tnmmedico = null;
                    int tmedicopecr = 0;
                    double tvrconsulta = 0;
                    double tvrmedico = 0;
                    boolean tmedicoplantao = false;
                    double tmedicoplantaovr = 0;

                    // Pega dados do médico
                    String medSQL = "SELECT med.md_nome, med.md_perc, md_vrconsulta, " + 
                            "md_vrmedico, md_plantao, md_plantaovr " +
                            "FROM medicos med WHERE med.md_codigo = ? LIMIT 1;";
                    Object[][] medParam = {{"int", (int)item[0]}};
                    ResultSet medRs = conn.AbrirTabela(medSQL, ResultSet.CONCUR_READ_ONLY, medParam);
                    try {
                        while (medRs.next()) {
                            tnmmedico = medRs.getString("md_nome");
                            tmedicopecr = medRs.getInt("md_perc");
                            tvrconsulta = medRs.getBigDecimal("md_vrconsulta").doubleValue();
                            tvrmedico = medRs.getBigDecimal("md_vrmedico").doubleValue();
                            tmedicoplantao = medRs.getBoolean("md_plantao");
                            tmedicoplantaovr = medRs.getBigDecimal("md_plantaovr").doubleValue();
                        }
                    } catch (SQLException medEx) { medEx.printStackTrace(); }
                    DbMain.FecharTabela(medRs);

                    double tconvnumero = fatRs.getDouble("ma_convnumero");

                    // Pega dados do medtaxas
                    double tvrclinica = 0;
                    double tvrmedicotx = 0;
                    String mtxSQL = "SELECT  mtx.mt_valor, mtx.mt_valormed " +
                    "FROM medtaxas mtx WHERE mtx.mt_cdmedico = ? AND mtx.mt_cdconvenio = ? LIMIT 1;";
                    Object[][] mtxParam = {{"int", (int)item[0]}, {"int", (int)item[1]}};
                    ResultSet mtxRs = conn.AbrirTabela(mtxSQL, ResultSet.CONCUR_READ_ONLY, mtxParam);
                    try {
                        while (mtxRs.next()) {
                            tvrclinica = mtxRs.getBigDecimal("mt_valor").doubleValue();
                            tvrmedicotx = mtxRs.getBigDecimal("mt_valormed").doubleValue();
                        }
                    } catch (SQLException mtxEx) { mtxEx.printStackTrace(); }
                    DbMain.FecharTabela(mtxRs);

                    String tconvnome = null;
                    // Pega dados do convenio
                    String convSQL = "SELECT con.cv_apelido FROM convenios con WHERE con.cv_numero = ? LIMIT 1;";
                    Object[][] conParam = {{"int", (int)item[1]}};
                    ResultSet conRs = conn.AbrirTabela(convSQL, ResultSet.CONCUR_READ_ONLY, conParam);
                    try {
                        while (conRs.next()) {
                            tconvnome = conRs.getString("cv_apelido");
                        }
                    } catch (SQLException conEx) { conEx.printStackTrace(); }
                    DbMain.FecharTabela(conRs);

                    // Separa só os comissionados
                    if (!tmedicoplantao) continue;
                    
                    if (tmpMesAno.isEmpty()) {
                        oldtdias = 1;
                        //tdias = 1;
                        
                        tmpMesAno = tmesano;
                    }

                    if (!tmpMesAno.equalsIgnoreCase(tmesano)) {
                        if (oldtatd != 0) lista.add(new FinanceiroClass(nid++, oldtmesano.substring(5,7) + meses[Integer.valueOf(oldtmesano.substring(5,7))], oldtcdmedico, oldtnmmedico, (int)oldtconvnumero, oldtconvnome, oldtatd, oldtvrconsulta, oldtvrmedico, oldtdias, oldtmedicoplantaovr));

                        //tdias = 1; 
                        oldtatd = 0;
                    }

                    oldtmesano = tmesano;
                    oldtcdmedico = tcdmedico;
                    oldtnmmedico = tnmmedico;
                    oldtconvnumero = tconvnumero;
                    oldtconvnome = tconvnome;                    
                    oldtatd += tatd;                                        
                    oldtvrconsulta = tvrconsulta;
                    oldtvrmedico = tvrmedico;
                    oldtmedicoplantaovr =  tmedicoplantaovr;                    
                    //oldtdias = tdias;
                    oldtdias = TotalPlantoes(oldtmesano.substring(5,7), oldtmesano.substring(0,4), (int)item[0]);
                    
                    //tdias += 1;
                    tmpMesAno = tmesano;
                    
                }
            } catch (SQLException ex) { ex.printStackTrace(); }
            DbMain.FecharTabela(fatRs);            
        }        
        
        Collections.sort(lista, new Comparator<FinanceiroClass>() {
            @Override
            public int compare(FinanceiroClass fruit2, FinanceiroClass fruit1) {
                return  fruit1.getData().compareTo(fruit2.getData());
            }
        });  
        
        return lista;
    }
    
    private int TotalPlantoes(String mes, String ano, int nrmedico) {
        String selectSQL = "SELECT count(fat.ma_data)::int atd " +
                           "FROM faturar fat WHERE " +
                           "(EXTRACT(MONTH FROM fat.ma_data::date)::int = ? AND " + 
                           "EXTRACT(YEAR FROM fat.ma_data::date)::int = ?) AND " +
                           "fat.ma_status = 4 AND fat.ma_consulta = 1 AND " +
                           "fat.ma_codmedico = ? GROUP BY fat.ma_data";
        Object[][] param = {
            {"int", Integer.valueOf(mes)}, 
            {"int", Integer.valueOf(ano)},
            {"int", nrmedico}
        };
        
        ResultSet rs = conn.AbrirTabela(selectSQL, ResultSet.CONCUR_READ_ONLY, param);
        int tot = 0;
        try {
            while (rs.next()) {
                tot += 1;
            }
        } catch (SQLException ex) {}
        DbMain.FecharTabela(rs);
        
        return tot;
    }
    
    private void PrintReport(String fileName, Map parametros,List<FinanceiroClass> lista) {
        try {
            JRDataSource jrds = new JRBeanCollectionDataSource(lista);
            JasperPrint print = JasperFillManager.fillReport(fileName, parametros, jrds);
            viewReportFrame("Relatorio Financeiro " + (jrbtComissoes.isSelected() ? "Comssões" : "Plantões"), print);
        } catch (JRException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    
    private void jrbtComissoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbtComissoesActionPerformed
        cdmed = -1;
        GridComissoes();
    }//GEN-LAST:event_jrbtComissoesActionPerformed

    private void GridComissoes() {    
        String tsql = "SELECT md_codigo, md_nome, md_categoria FROM medicos WHERE NOT md_plantao ORDER BY Lower(md_nome);";
        ResultSet trs = conn.AbrirTabela(tsql, ResultSet.CONCUR_READ_ONLY);
        
        TableControl.delall(jMedicos);
        TableControl.Clear(jMedicos);
        
        // Todos
        TableControl.add(jMedicos, new String[][] { { "00", "TODOS", "TODOS" }, { "C", "L", "L" } }, true);

        String mcod = null, mnome = null, mfuncao = null;
        try {
            while (trs.next()) {
                try { mcod = trs.getString("md_codigo"); } catch (SQLException e) {}
                try { mnome = trs.getString("md_nome"); } catch (SQLException e) {}
                try { mfuncao = trs.getString("md_categoria"); } catch (SQLException e) {}
                TableControl.add(jMedicos, new String[][] { { mcod, mnome, mfuncao }, { "C", "L", "L" } }, true);
                sorter = new TableRowSorter(jMedicos.getModel());
                jMedicos.setRowSorter(sorter);
            }
        } catch (SQLException e) {}
        try {trs.close();} catch (SQLException e) {}
        
        jMedicos.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 1) {
                    int trow = jMedicos.getSelectedRow();
                    if (trow == -1) {cdmed = -1; return;} 
                    int modelRow = jMedicos.convertRowIndexToModel(trow);
                    cdmed = Integer.valueOf(jMedicos.getModel().getValueAt(modelRow, 0).toString());
                }
            }
        });        
    }
    
    private void jrbtPlantoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbtPlantoesActionPerformed
        cdmed = -1;
        GridPlantoes();
    }//GEN-LAST:event_jrbtPlantoesActionPerformed

    private void GridPlantoes() {
        String tsql = "SELECT md_codigo, md_nome, md_categoria FROM medicos WHERE md_plantao ORDER BY Lower(md_nome);";
        ResultSet trs = conn.AbrirTabela(tsql, ResultSet.CONCUR_READ_ONLY);
        
        TableControl.delall(jMedicos);
        TableControl.Clear(jMedicos);
        
        // Todos
        TableControl.add(jMedicos, new String[][] { { "00", "TODOS", "TODOS" }, { "C", "L", "L" } }, true);

        String mcod = null, mnome = null, mfuncao = null;
        try {
            while (trs.next()) {
                try { mcod = trs.getString("md_codigo"); } catch (SQLException e) {}
                try { mnome = trs.getString("md_nome"); } catch (SQLException e) {}
                try { mfuncao = trs.getString("md_categoria"); } catch (SQLException e) {}
                TableControl.add(jMedicos, new String[][] { { mcod, mnome, mfuncao }, { "C", "L", "L" } }, true);
                sorter = new TableRowSorter(jMedicos.getModel());
                jMedicos.setRowSorter(sorter);
            }
        } catch (SQLException e) {}
        try {trs.close();} catch (SQLException e) {}

        jMedicos.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 1) {
                    int trow = jMedicos.getSelectedRow();
                    if (trow == -1) {cdmed = -1; return;} 
                    int modelRow = jMedicos.convertRowIndexToModel(trow);
                    cdmed = Integer.valueOf(jMedicos.getModel().getValueAt(modelRow, 0).toString());
                }
            }
        });        
    }

    private static void viewReportFrame( String titulo, JasperPrint print ) {

        /*
         * Cria um JRViewer para exibir o relatório.
         * Um JRViewer é uma JPanel.
         */
        JRViewer viewer = new JRViewer( print );

        // cria o JFrame
        JFrame frameRelatorio = new JFrame( titulo );

        // adiciona o JRViewer no JFrame
        frameRelatorio.add( viewer, BorderLayout.CENTER );

        // configura o tamanho padrão do JFrame
        frameRelatorio.setSize( 500, 500 );

        // maximiza o JFrame para ocupar a tela toda.
        frameRelatorio.setExtendedState( JFrame.MAXIMIZED_BOTH );

        // configura a operação padrão quando o JFrame for fechado.
        frameRelatorio.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );

        // exibe o JFrame
        frameRelatorio.setVisible( true );

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField jBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTable jMedicos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtPrint;
    private javax.swing.JFormattedTextField jdtfim;
    private javax.swing.JFormattedTextField jdtinic;
    private javax.swing.JRadioButton jrbtComissoes;
    private javax.swing.JRadioButton jrbtPlantoes;
    // End of variables declaration//GEN-END:variables
}
